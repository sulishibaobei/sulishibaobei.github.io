<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少女雨的博客</title>
  <subtitle>爱生活爱远方爱自由更爱你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.sulishibaobei.com/"/>
  <updated>2017-09-06T01:22:27.000Z</updated>
  <id>www.sulishibaobei.com/</id>
  
  <author>
    <name>少女雨</name>
    <email>380571249@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular 2+ 路由的那些事</title>
    <link href="www.sulishibaobei.com/title20170901/"/>
    <id>www.sulishibaobei.com/title20170901/</id>
    <published>2017-09-01T03:08:53.000Z</published>
    <updated>2017-09-06T01:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;路由的作用就是（导航）：会加载与请求路由相关联的组件，并获取特定路由的相关数据，这允许我们通过控制不同的路由，获取不同的数据，从而渲染不同的页面；</p>
<p><meta name="google-site-verification" content="3tk1JDTx2boawb5pbtnCtDiBYOi7SGqMJsgLhX0uHlw"></p>
<h2 id="几种常见的路由配置："><a href="#几种常见的路由配置：" class="headerlink" title="几种常见的路由配置："></a>几种常见的路由配置：</h2><blockquote>
<ul>
<li>Angular路由器是一个可选的外部Angular NgModule ，叫RouterModule;</li>
<li>路由器里面包含多种服务(RouterModule)，多种指令（RouterOutlet，RouterLink,RouterLinkActive），和一套配置（Routes）;<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; RouterModule&#125; from '@angular/router';</div><div class="line"> RouterModule.forRoot([</div><div class="line">       &#123;</div><div class="line">         path: 'test',</div><div class="line">         component: TestComponent</div><div class="line">       &#125;</div><div class="line"> ]) </div><div class="line">&lt;a routerLink="test"&gt;Test&lt;/a&gt; </div><div class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h3><h4 id="路由定义包括下面部分："><a href="#路由定义包括下面部分：" class="headerlink" title="路由定义包括下面部分："></a>路由定义包括下面部分：</h4><ul>
<li>[1]  Path:路由器会用它来匹配浏览器地址栏中的地址，如’test’; </li>
<li>[2]  Component:导航到此路由时，需要加载的组件；<br><strong><font color="#0099ff">注意，path不能以斜杠（/）开头。 路由器会为解析和构建最终的URL，这样当我们在应用的多个视图之间导航时，可以任意使用相对路径和绝对路径。</font></strong></li>
</ul>
<blockquote>
<p>另外：</p>
<ol>
<li>这里用到了RouterModule对象为我们提供的两个静态方法：forRoot()和forChild() 来配置路由信息；</li>
<li>forRoot()方法提供了路由需要的路由服务提供商和指令，并基于当前浏览器 URL 初始化导航；用于在模块中定义主要的路由信息，通过调用该方法使得我们的主模块可以访问路由模块中定义的所有指令；</li>
<li>a标签中的routerLink 指令绑定一个字符串，字符串是path路径中配置的字符串，它将告诉路由器，当用户点击这个链接时，应该导航到哪里；</li>
<li>当然routerLink还可以绑定一个数组，就是我们的带参路由,下面会具体介绍的：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/test', id]"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还可以在上面这样配置添加一个routerLinkActive指令, 我们需要让用户知道哪个路由处于激活状态，通常情况下我们通过向激活的链接添加一个 class 来实现该功能,然后我们写一个active的类:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"test"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   .active&#123;</div><div class="line">       color：red</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当此路由被点击时，字体会变成红色；这也是routerLinkActive的作用，使我们知道哪个路由处于激活状态；当然还可以添加上这个[routerLinkActiveOptions]=”{exact: true}”  只有当路由完全一样时，才会将active类加载上去：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"dashboard"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>  [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">"&#123;exact: true&#125;"</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;chrome控制台这样显示：<br><img src="/images/router-1.png" alt="cmd-markdown-logo"><br>&nbsp;&nbsp;&nbsp;&nbsp;可见routerLink还是会自动将路由链接到href上的；class=”active“也作用上去啦；当切换路由时：<br><img src="/images/router-2.png" alt="cmd-markdown-logo"><br><code>class=”active”</code> 移到我点击的路由上，只是应该是调用了：ngAfterContentInit(),ngOnChanges(),ngOnDestroy()</p>
<blockquote>
<p>注意：第一个路径片段可以以 / ，./ 或 ../ 开头：<br>  如果以 / 开头，路由将从根路由开始查找<br>  如果以 ./ 开头或没有使用 / ，则路由将从当前激活路由的子路由开始查找<br>  如果以 ../ 开头，路由往上一级查找<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['../test', id]"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>当然这里我们也可以通过在component里控制写:</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123;Router&#125; from '@angular/router';</div><div class="line">&lt;a (click)="go()"&gt;Heroes&lt;/a&gt;</div><div class="line">constructor(private router: Router) &#123;&#125;</div><div class="line">go() &#123;</div><div class="line">  this.router.navigate(['heroes']);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p> 这种效果也是一样的；这里就需要注入router服务：router方法用于切换路由很有用，下面会具体来介绍router服务的；<br>   路由出口:RouterOutlet是由RouterModule提供的指令之一。当我们在应用中导航时，路由器就把激活的组件显示在<code>&lt;/router-outlet&gt;</code> 里面。不写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>会导致组件内容不加载进来，从而不显示内容；<br>但是一个组件可以共用一个routeroutlet，所以app.component.ts里面配置即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="第二种写法："><a href="#第二种写法：" class="headerlink" title="第二种写法："></a>第二种写法：</h2><blockquote>
<p>请看代码：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">RouterModule.forRoot([...]) 将[] 及中间的内容当成配置文件提取出去；</div><div class="line">RouterModule.forRoot(routes),</div><div class="line">routes是我们需要导入的配置文件参数名：</div><div class="line"><span class="keyword">import</span> &#123; routes&#125; from <span class="string">'./app-routing.module'</span>;</div><div class="line">app-routing.module:中我们可以这样写：</div><div class="line"><span class="keyword">import</span> &#123; DashboardComponent &#125; from <span class="string">'./dashboard/dashboard.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HeroesComponent &#125; from <span class="string">'./hero/heroes.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HeroDetailComponent &#125; from <span class="string">'./detail/hero-detail.component'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</div><div class="line">  &#123; path: <span class="string">''</span>, redirectTo: <span class="string">'/dashboard'</span>, pathMatch: <span class="string">'full'</span> &#125;,</div><div class="line">  &#123; path: <span class="string">'dashboard'</span>,  component: DashboardComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'detail/:id'</span>, component: HeroDetailComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'heroes'</span>,     component: HeroesComponent &#125;,  &#123; path: <span class="string">'**'</span>, component:DashboardComponent&#125;];</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<ul>
<li><strong>{ path: ‘’, redirectTo: ‘/dashboard’, pathMatch: ‘full’ }</strong><br> 表示重定向路由：需要一个pathMatch属性，告诉路由器是如何用URL去匹配路由的路径的，没有这个属性就会报错；意思就是当路由URL等于’’时，会去加载DashboardComponent组件；所以你运行你的服务端口号：localhost:4200首先加载的就会是这个组件；</li>
<li><em><font color="#000000">{ path: “**”, component:DashboardComponent}</font></em><br> **路径是一个通配符，表示除了以上几种path,任何的路径都会加载DashboardComponent组件，这个记得写在路由配置最后</li>
</ul>
</blockquote>
<h3 id="当然这种方式我们还能这么写"><a href="#当然这种方式我们还能这么写" class="headerlink" title="当然这种方式我们还能这么写:"></a>当然这种方式我们还能这么写:</h3><ol>
<li><p>无declarations！声明是关联模块的重点。我们将AppRoutingModule抛出去，当做一个路由模块，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Routes,RouterModule&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</div><div class="line"><span class="keyword">import</span> &#123; DashboardComponent &#125; <span class="keyword">from</span> <span class="string">'./dashboard/dashboard.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HeroesComponent &#125; <span class="keyword">from</span> <span class="string">'./hero/heroes.component'</span>;</div><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/dashboard'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'dashboard'</span>,  <span class="attr">component</span>: DashboardComponent &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'heroes'</span>,     <span class="attr">component</span>: HeroesComponent &#125;</div><div class="line">];</div><div class="line">@NgModule(&#123;</div><div class="line">  <span class="attr">imports</span>: [ RouterModule.forChild(routes) ],</div><div class="line">  <span class="attr">exports</span>: [ RouterModule ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>app.module.ts中引入：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AppRoutingModule&#125; from <span class="string">'./app-routing.module'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>imports:中导入这个就可以啦<strong>AppRoutingModule</strong></p>
<blockquote>
<p>这种用法和上面这种用法是一样的还有一点：如何解决第二次刷新出现404问题：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[RouterModule.forRoot(routes,&#123;useHash:<span class="literal">true</span>&#125;)]</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<blockquote>
<p>配置后面这一点，通过添加一个#，防止刷新第二次出现404；<em><a href="http://localhost:4201/#" target="_blank" rel="external">http://localhost:4201/#</a></em><br> RouterModule.forChild(routes)写在子模块里面，而且这边用的是forChild(),不是forRoot（）,使用forRoot()也是不会错的，但是一般情况下<br><code><font color="red">根模块中使用forRoot()，子模块中使用forChild()</font></code><br>   forChild()只能用在特性模块中，这样的一点好处就是我们不必在主模块就配置好所有的路由信息，在需要的时候将他们导入主模块；</p>
</blockquote>
<h3 id="参数化路由"><a href="#参数化路由" class="headerlink" title="参数化路由"></a>参数化路由</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; path: <span class="string">'detail/:id'</span>, component: HeroDetailComponent &#125;,</div></pre></td></tr></table></figure>
<blockquote>
<p>配置参数化路由格式： :id 是一个占位符，当导航到HeroDetailCompnent组件上时，会被填入一个特定的id；<br><strong>这里我们是这样绑定的：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>  [<span class="attr">routerLink</span>]=<span class="string">"['/detail', hero.id]"</span>  <span class="attr">class</span>=<span class="string">"col-1-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p><font color="red">eg: <a href="http://localhost:4201/detail/11" target="_blank" rel="external">http://localhost:4201/detail/11</a> 这时的id等于11；</font></p>
<ul>
<li>[1]传参类型的id作用可以根据传入的id不同让HeroDetailComponent显示不同的内容；</li>
<li>[2]但是怎么能让其显示不同的内容呢？ 也就和我们这个id有关系，如何获取这个id 用在我们的组件里面呢？</li>
<li>[3]通过注入ActivatedRoute服务，一站式获取路由信息；<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActivatedRoute&#125; from <span class="string">'@angular/router'</span>;</div><div class="line"> <span class="keyword">constructor</span>(<span class="params"></span></div><div class="line">    <span class="keyword">private</span> route: ActivatedRoute,</div><div class="line">     ) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>接下来我们这样试试：</strong><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> params;</div><div class="line"><span class="keyword">this</span>.route.params.subscribe(</div><div class="line">      params =&gt; &#123;</div><div class="line">         <span class="keyword">this</span>.params = params;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.params);</div><div class="line">      &#125;</div><div class="line">    );</div></pre></td></tr></table></figure></p>
<p><em>这样获取来的是一个对象：直接取id就能获取到了；既然是一站式获取，肯定不止这几个功能 后面会具体介绍它：</em></p>
<h3 id="路由配置是也可以通过子路由来配置children："><a href="#路由配置是也可以通过子路由来配置children：" class="headerlink" title="路由配置是也可以通过子路由来配置children："></a>路由配置是也可以通过子路由来配置children：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path: <span class="string">'heroes'</span>,</div><div class="line">    component: HeroesComponent,</div><div class="line">    children: [</div><div class="line">      &#123; path: <span class="string">'heroTest'</span>, component: HeroTestComponent &#125;,</div><div class="line">    ]</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>是这样配置的；此时HeroTestComponent组件的路由其实是:’heroes/heroTest’;</p>
<h3 id="懒加载loadChildren"><a href="#懒加载loadChildren" class="headerlink" title="懒加载loadChildren:"></a>懒加载loadChildren:</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     path:<span class="string">'loadtest'</span>,</div><div class="line">     loadChildren:<span class="string">'./loadtest/loadtest.module#LoadtestModule'</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>路由是这样配置的</strong>：</p>
<ul>
<li>[1]这里注意几点：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LoadtestComponent &#125; from <span class="string">'./loadtest/loadtest.component'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>组件不需要在app.module.ts引入</p>
<ul>
<li><p>[2]loadtest.module.ts 也不需要在app.module.ts中引入；而是通过loadchildren属性，在需要的时候告诉Angular路由依据loadchildren<br>属性配置的路径去加载LoadtestModule模块，这就是模块懒加载功能；当用户需要的时候才回去加载，大大减少了应用启动时的资源加载大小；</p>
</li>
<li><p>[3] loadChildren后面的字符串由三部分组成：<br>(3.1) 需要导入模块路劲的相对路径<br>(3.2) #分隔符<br>(3.3) 导出模块类的名称</p>
</li>
<li><p>[4]还有一点也是也是重要的：loadtestModule代码是这样的：里面要引入自己的路由；</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;CommonModule&#125; from <span class="string">'@angular/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; LoadtestComponent &#125; from <span class="string">'./loadtest.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;RouterModule&#125; from <span class="string">'@angular/Router'</span>;</div><div class="line"><span class="keyword">import</span> &#123;route&#125; from <span class="string">'./loadtest-routing.module'</span>;</div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">    imports:[</div><div class="line">        CommonModule,</div><div class="line">        RouterModule.forChild(route),</div><div class="line">    ],</div><div class="line">    declarations:[</div><div class="line">        LoadtestComponent</div><div class="line">    ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoadtestModule&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>在route路由里面记得这样配置这样一句才不会出错：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LoadtestComponent &#125; from <span class="string">'./loadtest.component'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> route = [</div><div class="line">    &#123;</div><div class="line">       path:<span class="string">''</span>,</div><div class="line">        component: LoadtestComponent</div><div class="line">    &#125;,</div><div class="line">]</div></pre></td></tr></table></figure></p>
</blockquote>
<p><font color="red">path:’’,才能保证代码不出错；</font></p>
<blockquote>
<p>懒加载的文件要注意：app.module.ts中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">declarations: [</div><div class="line">   AppComponent,</div><div class="line">   DashboardComponent,</div><div class="line">   HeroDetailComponent,</div><div class="line">   HeroesComponent,</div><div class="line">   TestComponent,</div><div class="line"> ],</div></pre></td></tr></table></figure></p>
<p>这里面的文件，采用懒在家的模块是引用不到得，因为lazy加载文件有自己的ngModule ，如果要使用的组件是同一个，最好建立一个shareModule模块；<br>采用commonModule 将共享文件放进去，之后的Module里使用再加载进imports中；</p>
</blockquote>
<h2 id="Router服务："><a href="#Router服务：" class="headerlink" title="Router服务："></a>Router服务：</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">class</span> Router&#123;</div><div class="line"><span class="number">2.</span>         errorHandler:ErrorHandler</div><div class="line"><span class="number">3.</span>         navigated: <span class="built_in">boolean</span></div><div class="line"><span class="number">4.</span>         urlHandlingStrategy:UrlHandlingStrategy</div><div class="line"><span class="number">5.</span>         routeReuseStrategy:RouteReuseStrategy</div><div class="line"><span class="number">6.</span>         config:Routes</div><div class="line"><span class="number">7.</span>        initialNavigation():<span class="built_in">void</span></div><div class="line"><span class="number">8.</span>        setUpLocationChangeListener():<span class="built_in">void</span></div><div class="line"><span class="number">9.</span>        <span class="keyword">get</span> routerState():RouterState</div><div class="line"><span class="number">10.</span>       <span class="keyword">get</span> url(): <span class="built_in">string</span></div><div class="line"><span class="number">11.</span>       <span class="keyword">get</span> events():Observable&lt;Event&gt;</div><div class="line"><span class="number">12.</span>       resetConfig(config:Routes):<span class="built_in">void</span></div><div class="line"><span class="number">13.</span>       ngOnDestroy():<span class="built_in">void</span></div><div class="line"><span class="number">14.</span>       dispose():<span class="built_in">void</span></div><div class="line"><span class="number">15.</span>       createUrlTree(commands: <span class="built_in">any</span>[], navigationExtras:NavigationExtras):UrlTree</div><div class="line"><span class="number">16.</span>       navigateByUrl(url: <span class="built_in">string</span>|UrlTree, extras:NavigationExtras):Promise&lt;<span class="built_in">boolean</span>&gt;</div><div class="line"><span class="number">17.</span>       navigate(commands: <span class="built_in">any</span>[], extras:NavigationExtras):Promise&lt;<span class="built_in">boolean</span>&gt;</div><div class="line"><span class="number">18.</span>       serializeUrl(url:UrlTree): <span class="built_in">string</span></div><div class="line"><span class="number">19.</span>       parseUrl(url: <span class="built_in">string</span>):UrlTree</div><div class="line"><span class="number">20.</span>       isActive(url: <span class="built_in">string</span>|UrlTree, exact: <span class="built_in">boolean</span>): <span class="built_in">boolean</span></div><div class="line"><span class="number">21.</span>       &#125;</div></pre></td></tr></table></figure>
<p>这是Router API为我们提供的方法和属性；</p>
<p>看看几个常用的：</p>
<h3 id="navigate"><a href="#navigate" class="headerlink" title="navigate()"></a><code>navigate()</code></h3><blockquote>
<p>该方法支持的参数类型和routerLink指令一样，所以他们的作用也是一样的：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigate([<span class="string">'test'</span>, id]);</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>或者</strong><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigate([<span class="string">'test'</span>]);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>调用该方法后页面会自动跳转到对应的路由地址；<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigate([<span class="string">'test'</span>], &#123; relativeTo: <span class="keyword">this</span>.route&#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>我们可以设置一个参照路径，参照路径this.route从ActivatedRoute里面取；配置这个可以让自己知道相对于什么位置导航，this.route就是相对于当前的路由进行导航，<br>假如当前url：localhost:4200/hero ,那么导航后的结果就是：localhost:4200/hero/test</p>
<h3 id="navigateByUrl"><a href="#navigateByUrl" class="headerlink" title="navigateByUrl()"></a>navigateByUrl()</h3><blockquote>
<p>这个叫做绝对路由；<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigateByUrl(<span class="string">'home'</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>可以帮助你快速的切换到某个路由下面，如果你当时的路由是这样的：<br>localhost:4200/hero/test 点击这个路由后就是：localhost:4200/home 我们一般用这个路由来回到首页；<br>和navigate()的区别还有点是：这个不是根据参数来确定路由地址的</p>
<h3 id="config-会将页面所有的路由配置信息都显示："><a href="#config-会将页面所有的路由配置信息都显示：" class="headerlink" title="config 会将页面所有的路由配置信息都显示："></a>config 会将页面所有的路由配置信息都显示：</h3><p><img src="/images/router-3.png" alt="cmd-markdown-logo"><br>看看路由树：<br><img src="/images/router-4.png" alt="cmd-markdown-logo"></p>
<h3 id="url-输出当前-的路由path"><a href="#url-输出当前-的路由path" class="headerlink" title="url 输出当前 的路由path"></a>url 输出当前 的路由path</h3><p><code><br>eg：<a href="http://localhost:4200/detail/11" target="_blank" rel="external">http://localhost:4200/detail/11</a><br>url: /detail/11<br></code></p>
<h3 id="每次导航前都会调用events方法；"><a href="#每次导航前都会调用events方法；" class="headerlink" title="每次导航前都会调用events方法；"></a>每次导航前都会调用events方法；</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RouterModule.forRoot(routes, &#123;enableTracing: <span class="literal">true</span> &#125;)</div></pre></td></tr></table></figure>
<p>通过在控制台配置enableTracing: true可以在控制台看到相关改变；</p>
<blockquote>
<p><strong>注意：enableTracing: true 只能在forRoot()里面添加</strong><br>具体的事件有：<br><img src="/images/router-5.png" alt="cmd-markdown-logo"><br> chrome控制台:<br><img src="/images/router-6.png" alt="cmd-markdown-logo"><br><strong>注意：这些事件是以Observable的形式提供的</strong></p>
</blockquote>
<h2 id="ActivateRoute-API"><a href="#ActivateRoute-API" class="headerlink" title="ActivateRoute API :"></a>ActivateRoute API :</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> ActivatedRoute &#123;</div><div class="line">snapshot: ActivatedRouteSnapshot</div><div class="line">url: Observable&lt;UrlSegment[]&gt;</div><div class="line">params: Observable&lt;Params&gt;</div><div class="line">queryParams: Observable&lt;Params&gt;</div><div class="line">fragment: Observable&lt;<span class="built_in">string</span>&gt;</div><div class="line">data: Observable&lt;Data&gt;</div><div class="line">outlet: <span class="built_in">string</span></div><div class="line">component: Type&lt;<span class="built_in">any</span>&gt;|<span class="built_in">string</span>|<span class="literal">null</span></div><div class="line"><span class="keyword">get</span> routeConfig(): Route|<span class="literal">null</span></div><div class="line"><span class="keyword">get</span> root(): ActivatedRoute</div><div class="line"><span class="keyword">get</span> parent(): ActivatedRoute|<span class="literal">null</span></div><div class="line"><span class="keyword">get</span> firstChild(): ActivatedRoute|<span class="literal">null</span></div><div class="line"><span class="keyword">get</span> children(): ActivatedRoute[]</div><div class="line"><span class="keyword">get</span> pathFromRoot(): ActivatedRoute[]</div><div class="line"><span class="keyword">get</span> paramMap(): Observable&lt;ParamMap&gt;</div><div class="line"><span class="keyword">get</span> queryParamMap(): Observable&lt;ParamMap&gt;</div><div class="line">toString(): <span class="built_in">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="parmaMap"><a href="#parmaMap" class="headerlink" title="parmaMap"></a>parmaMap</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">第一步：import &#123; Router, ActivatedRoute, ParamMap &#125; from '@angular/router';</div><div class="line">第二步：import 'rxjs/add/operator/switchMap';导入switchMap操作符是因为我们稍后将会处理路由参数的可观察对象Observable ;会在以后的章节中介绍操作符的；</div><div class="line">第三步：</div><div class="line">constructor(</div><div class="line"> private heroService: HeroService,</div><div class="line"> private route: ActivatedRoute,</div><div class="line"> private router: Router,</div><div class="line">  ) &#123;&#125;</div><div class="line">&lt;code&gt; &lt;br&gt;&lt;/code&gt;</div></pre></td></tr></table></figure>
<p>假定事先写好了HeroService：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.route.paramMap</div><div class="line">   .switchMap((params: ParamMap) =&gt; <span class="keyword">this</span>.heroService.getHero(+params.get(<span class="string">'id'</span>)))</div><div class="line">    .subscribe(hero =&gt; <span class="keyword">this</span>.hero = hero );</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>我们这样操作，前面已经介绍过用parmas获取参数；所以这样写也可以，用的是paramMap就引入paramMap，params就引入Params</p>
 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.route.params</div><div class="line">     .switchMap((params: Params) =&gt; <span class="keyword">this</span>.heroService.getHero(+params[<span class="string">'id'</span>]))</div><div class="line">     .subscribe(hero =&gt;</div><div class="line">       <span class="keyword">this</span>.hero = hero;</div><div class="line">     &#125;</div><div class="line">     );</div></pre></td></tr></table></figure>
<p>由于参数是作为Observable提供的，所以我们得用switchMap操作符来根据名字取得id参数，并告诉HeroService来获取带有那个id的英雄。</p>
<h3 id="snapshot-快照"><a href="#snapshot-快照" class="headerlink" title="snapshot(快照)"></a>snapshot(快照)</h3><p>route.snapshot提供了路由参数的初始值。 我们可以通过它来直接访问参数，而不用订阅或者添加Observable的操作符<br>所以获取参数的id还可以这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>  [<span class="attr">routerLink</span>]=<span class="string">"['/detail', hero.id]"</span>  <span class="attr">class</span>=<span class="string">"col-1-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">br</span>&gt;</span>this.params = this.route.snapshot.paramMap.get('id');<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>console.log(this.params);</div></pre></td></tr></table></figure></p>
<p> 所以上面的代码改成这样更好：</p>
 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.params = <span class="keyword">this</span>.route.snapshot.paramMap.get(<span class="string">'id'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.params);</div><div class="line"><span class="keyword">this</span>.heroService.getHero(<span class="keyword">this</span>.params)</div><div class="line">  .then(hero =&gt; <span class="keyword">this</span>.hero = hero);</div></pre></td></tr></table></figure>
<p>两种方法：params 和snapshot到底什么时候该用哪种呢？</p>
<ol>
<li>需要直接访问参数，主要获取初始值，不用订阅的情况下用snapshot；</li>
<li>需要连续导航多次的用params;</li>
</ol>
<p>##总结 ,路由主要是用到了这些方面啦：<br> <img src="/images/router-7.png" alt="cmd-markdown-logo"></p>
<h2 id="给路由添加一些新特性："><a href="#给路由添加一些新特性：" class="headerlink" title="给路由添加一些新特性："></a>给路由添加一些新特性：</h2><h3 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h3><ul>
<li><p>[1] 在app.module.ts中引入启用Angular动画必备的, 记得在imports中导入：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; BrowserAnimationsModule &#125; from <span class="string">'@angular/platform-browser/animations'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>[2] 在app.component.ts同级下创建一个animation.ts文件，用来存放我们的动画效果；</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; animate, AnimationEntryMetadata, state, style, transition, trigger &#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> slideInDownAnimation: AnimationEntryMetadata =</div><div class="line">  trigger(<span class="string">'routeAnimation'</span>, [</div><div class="line">    state(<span class="string">'*'</span>,</div><div class="line">      style(&#123;</div><div class="line">        opacity: <span class="number">1</span>,</div><div class="line">        transform: <span class="string">'translateX(0)'</span></div><div class="line">      &#125;)</div><div class="line">    ),</div><div class="line">    transition(<span class="string">':enter'</span>, [</div><div class="line">      style(&#123;</div><div class="line">        opacity: <span class="number">0</span>,</div><div class="line">        transform: <span class="string">'translateX(-100%)'</span></div><div class="line">      &#125;),</div><div class="line">      animate(<span class="string">'0.2s ease-in'</span>)</div><div class="line">    ]),</div><div class="line">    transition(<span class="string">':leave'</span>, [</div><div class="line">      animate(<span class="string">'0.5s ease-out'</span>, style(&#123;</div><div class="line">        opacity: <span class="number">0</span>,</div><div class="line">        transform: <span class="string">'translateY(100%)'</span></div><div class="line">      &#125;))</div><div class="line">    ])</div><div class="line">  ]);</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>假定我有以上代码，视图进场和出场；</p>
</blockquote>
<ol>
<li>构建动画需要的库；</li>
<li>导出了一个名叫slideInDownAnimation的常量，并把它设置为一个名，用于外部引入此ts文件；</li>
<li>叫routeAnimation的动画触发器。带动画的组件将会引用这个名字。用在外部html页面引用</li>
<li>指定了一个通配符状态 —— *，它匹配该路由组件存在时的任何动画状态。</li>
<li>定义两个过渡效果，其中一个（:enter）在组件进入应用视图时让它从屏幕左侧缓动进入（ease-in），另一个（:leave）在组件离开应用视图时让它向下飞出。</li>
</ol>
<ul>
<li>[3] 如何使用动画；</li>
</ul>
<ol>
<li>在需要的组件中引入变量名为：slideInDownAnimation的文件animation.ts；</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;slideInDownAnimation&#125; from <span class="string">'../animation'</span>;</div></pre></td></tr></table></figure>
<ul>
<li><p>[4]组件中配置</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">templateUrl: <span class="string">'hero-detail.component.html'</span>,</div><div class="line">animations: [slideInDownAnimation]</div></pre></td></tr></table></figure>
</li>
<li><p>[5]html模板中这样引入：    </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div *ngIf=<span class="string">"hero"</span> [<span class="meta">@routeAnimation</span>]=<span class="string">"'active'"</span>&gt;</div></pre></td></tr></table></figure>
<p>@routeAnimation 动画触发器名<br><img src="/images/router-8.png" alt="cmd-markdown-logo"><br>点击之后会自动加载动画的；</p>
<h3 id="多重路由出口"><a href="#多重路由出口" class="headerlink" title="多重路由出口"></a>多重路由出口</h3><p><strong>一般情况下：我们使用一个路由出口就行啦，什么情况下会使用第二路由呢？</strong></p>
</li>
</ul>
<ol>
<li>创建一个新组件ComposemessageComponent</li>
<li><p>路由配置：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:<span class="string">'compose'</span>,</div><div class="line">    component:ComposemessageComponent,</div><div class="line">    outlet:<span class="string">'popup'</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>html页面这样配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;nav&gt;</div><div class="line">   &lt;a routerLink="dashboard" routerLinkActive="active"  [routerLinkActiveOptions]="&#123;exact: true&#125;"&gt;Dashboard&lt;/a&gt;</div><div class="line">   &lt;a (click)="go()" &gt;Heroes&lt;/a&gt;</div><div class="line">   &lt;a routerLink="test"  routerLinkActive="active"  [routerLinkActiveOptions]="&#123;exact: true&#125;"&gt;Test&lt;/a&gt;</div><div class="line">    &lt;a routerLink="loadtest"  routerLinkActive="active"&gt;loadTest&lt;/a&gt; </div><div class="line">    &lt;a [routerLink]="[&#123; outlets: &#123; popup: ['compose'] &#125; &#125;]"&gt;Contact&lt;/a&gt;</div><div class="line"> &lt;/nav&gt;</div><div class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class="line">&lt;router-outlet name="popup"&gt;&lt;/router-outlet&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这是我的页面所有的路由配置；<br><img src="/images/router-9.png" alt="cmd-markdown-logo"><br>点击Contact 不会替换其他的组件信息，注意看<code>Url:<a href="http://localhost:4200/dashboard(popup:compose" target="_blank" rel="external">http://localhost:4200/dashboard(popup:compose</a>)</code><br>点击Contact url地址没有变成<code><a href="http://localhost:4200/contact" target="_blank" rel="external">http://localhost:4200/contact</a></code>而是采用圆括号加载</p>
<ul>
<li>圆括号包裹的部分是第二路由。</li>
<li>第二路由包括一个出口名称（popup）、一个冒号分隔符和第二路由的路径（compose）<br>而是显示在下面，点击test也是一样：<br><img src="/images/router-10.png" alt="cmd-markdown-logo"><br>Contact路由加载的组件不会被清除，一直显示在下面，状态一直被激活；<br>这里我们就能知道第二路由的用处：即使在应用中的不同页面之间切换，这个组件也应该始终保持打开状态，多重出口可以在同一时间根据不同的路由来显示不同的内容；<br>但是什么时候清除我们的第二路由呢？如果我页面不需要呢？<blockquote>
<p>注意：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"go()"</span> &gt;</span>Heroes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">go() &#123;</div><div class="line">   this.router.navigateByUrl('heroes');</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>当点击Heroes时，Contact路由加载的内容就不会被显示：<br><img src="/images/router-1`.png" alt="cmd-markdown-logo"><br>原因是这样的：<br>它使用Router.navigateNyUrl()方法进行强制导航,所以路由清除啦；<br>还可以这样清除：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigate([&#123; outlets: &#123; popup: <span class="literal">null</span> &#125;&#125;]);</div><div class="line">outlets属性的值是另一个对象，该对象用一些出口名称作为属性名。 唯一的命名出口是<span class="string">'popup'</span>。但这里，<span class="string">'popup'</span>的值是<span class="literal">null</span>。<span class="literal">null</span>不是一个路由，</div><div class="line">但却是一个合法的值。 把popup这个RouterOutlet设置为<span class="literal">null</span>会清除该出口，并且从当前URL中移除第二路由popup</div></pre></td></tr></table></figure>
<h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>按照上面所说：任何用户都能在任何时候导航到任何地方，这样就有问题，可能此用户并没有权限切换到此路由，<br>可能用户未登陆不能切换，或者做一些友好提示之后再切换；<br>所以路由守卫就来了：<br>守卫返回一个值，以控制路由器的行为：</p>
<ol>
<li>如果它返回true，导航过程会继续</li>
<li>如果它返回false，导航过程会终止，且用户会留在原地。<br>也就是你导航的路由是可以取消的，路由守卫还有一个好处就是回退功能时，可以防止用户无限回退，走出app；<blockquote>
<p>路由守卫怎么做：<br>用CanActivate来处理导航到某路由的情况。<br>用CanActivateChild来处理导航到某子路由的情况。<br>用CanDeactivate来处理从当前路由离开的情况.<br>用Resolve在路由激活之前获取路由数据。<br>用CanLoad来处理异步导航到某特性模块的情况。</p>
</blockquote>
</li>
</ol>
<hr>
<p>返回的值是一个Observable<boolean>或Promise<boolean>，路由器会等待这个可观察对象被解析为true或false。<br>在分层路由的每个级别上，我们都可以设置多个守卫。 路由器会先按照从最深的子路由由下往上检查的顺序来检查CanDeactivate()和CanActivateChild()守卫。 然后它会按照从上到下的顺序检查CanActivate()守卫。 如果特性模块是异步加载的，在加载它之前还会检查CanLoad()守卫。 如果任何一个守卫返回false，其它尚未完成的守卫会被取消，这样整个导航就被取消了。<br>看看路由守卫怎么实现：<br>1.new 一个新项目activeComponent;<br>2.编写守卫服务：</boolean></boolean></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; CanActivate &#125; from <span class="string">'@angular/router'</span>;</div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoadTestService <span class="keyword">implements</span> CanActivate&#123;</div><div class="line">   canActivate() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'AuthGuard#canActivate called'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 3.路由中这样导入我们的守卫：</p>
 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActiveComponent &#125; from <span class="string">'./active/active.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;LoadTestService&#125; from <span class="string">'./loadtest.service'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> route = [</div><div class="line">    &#123;</div><div class="line">        path:<span class="string">''</span>,</div><div class="line">        component: LoadtestComponent,</div><div class="line">        canActivate:[LoadTestService],</div><div class="line">        children:[</div><div class="line">            &#123;</div><div class="line">                path:<span class="string">'a'</span>,</div><div class="line">                component: ActiveComponent</div><div class="line">            &#125;   </div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>这样我们的ActiveComponent就是受保护的； 当然这只是模拟；还有更多用法，以后来列举；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;路由的作用就是（导航）：会加载与请求路由相关联的组件，并获取特定路由的相关数据，这允许我们通过控制不同的路由，获取不同的数据，从而渲染不同的页面；&lt;/p&gt;
&lt;p&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;3tk1JDTx2boawb5pbtnCtDiBYOi7SGqMJsgLhX0uHlw&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;几种常见的路由配置：&quot;&gt;&lt;a href=&quot;#几种常见的路由配置：&quot; class=&quot;headerlink&quot; title=&quot;几种常见的路由配置：&quot;&gt;&lt;/a&gt;几种常见的路由配置：&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Angular路由器是一个可选的外部Angular NgModule ，叫RouterModule;&lt;/li&gt;
&lt;li&gt;路由器里面包含多种服务(RouterModule)，多种指令（RouterOutlet，RouterLink,RouterLinkActive），和一套配置（Routes）;
    
    </summary>
    
      <category term="Angular 2+" scheme="www.sulishibaobei.com/categories/Angular-2/"/>
    
    
      <category term="Angular 2+" scheme="www.sulishibaobei.com/tags/Angular-2/"/>
    
      <category term="router" scheme="www.sulishibaobei.com/tags/router/"/>
    
      <category term="懒加载" scheme="www.sulishibaobei.com/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
</feed>
